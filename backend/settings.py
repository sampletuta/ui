"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', "django-secure-8k9x2!v#m@3$qwe4rt5y6ui7op8as9df0gh1jk2lz3xc4vb5nm6@#$%^&*()_+=-[]{}|")

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'
DEBUG = True
ALLOWED_HOSTS = ['*']

# ALLOWED_HOSTS = os.environ.get('*', 'localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "backendapp",
    "notifications",
    "video_player",
    "source_management",  # Added for video source management
    "face_ai"
]

MIDDLEWARE = [
    # Security middlewares (order matters!)
    # "backendapp.middleware.SecurityMiddleware",  # Custom comprehensive security - TEMPORARILY DISABLED
    "django.middleware.security.SecurityMiddleware",  # Core security features
    "whitenoise.middleware.WhiteNoiseMiddleware",  # For serving static files
    
    # Session and authentication
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    
    # Additional security middlewares
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    
    # Custom session monitoring
    "backendapp.middleware.SessionMonitoringMiddleware",  # Session monitoring and logging
    "backendapp.middleware.SessionTimeoutMiddleware",  # Session timeout handling
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'backendapp' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"

# ASGI Application for async support
ASGI_APPLICATION = "backend.asgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Cache configuration for sessions
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = 'backendapp.CustomUser'


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Static files configuration for production
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files (User uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Django Notifications Settings
DJANGO_NOTIFICATIONS_CONFIG = {
    'USE_JSONFIELD': True,
}

# Authentication Settings
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/login/'

# Session Settings
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 3600  # 1 hour in seconds (much shorter for security)
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Session expires when browser closes
SESSION_COOKIE_SECURE = not DEBUG  # True in production, False in development
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_SAVE_EVERY_REQUEST = False
SESSION_COOKIE_NAME = 'sessionid'

# Enhanced Session Configuration - SECURE SETTINGS
SESSION_COOKIE_MAX_AGE = 3600  # 1 hour maximum
SESSION_COOKIE_DOMAIN = None  # Set to domain in production
SESSION_COOKIE_PATH = '/'
SESSION_COOKIE_AGE_SECONDS = 3600  # For logging clarity

# Session Timeout Configuration - SHORT TIMEOUTS
SESSION_TIMEOUT_WARNING = 300  # Show warning 5 minutes before expiry
SESSION_TIMEOUT_REDIRECT = 60  # Redirect to login 1 minute before expiry
SESSION_ABSOLUTE_TIMEOUT = 3600  # Absolute maximum 1 hour

# Session Security - STRICT SETTINGS
SESSION_COOKIE_SECURE = not DEBUG  # HTTPS only in production
SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access
SESSION_COOKIE_SAMESITE = 'Lax'  # CSRF protection
SESSION_COOKIE_REFRESH_EACH_REQUEST = False  # Don't refresh on every request

# Session Monitoring
SESSION_MONITORING_ENABLED = True
SESSION_ACTIVITY_LOGGING = True
SESSION_EXPIRY_LOGGING = True

# Milvus Configuration (for face AI integration)
MILVUS_CONFIG = {
    'HOST': os.environ.get('MILVUS_HOST', 'localhost'),
    'PORT': int(os.environ.get('MILVUS_PORT', '19530')),  # Updated to 19530 (your actual Milvus port)
    'COLLECTION_NAME': os.environ.get('MILVUS_COLLECTION_NAME', 'watchlist'),
    'COLLECTION_PREFIX': os.environ.get('MILVUS_COLLECTION_PREFIX', 'surveillance_'),
    'DIMENSION': int(os.environ.get('MILVUS_DIMENSION', '512')),  # Face embedding dimension
    'METRIC_TYPE': os.environ.get('MILVUS_METRIC_TYPE', 'COSINE'),  # Updated to COSINE for face similarity
    'INDEX_TYPE': os.environ.get('MILVUS_INDEX_TYPE', 'IVF_FLAT'),
    'INDEX_PARAMS': {
        'nlist': int(os.environ.get('MILVUS_INDEX_NLIST', '1024'))
    },
    'SEARCH_PARAMS': {
        'nprobe': int(os.environ.get('MILVUS_SEARCH_NPROBE', '10'))
    },
    'CONNECTION_ALIAS': os.environ.get('MILVUS_CONNECTION_ALIAS', 'default'),
    'AUTO_CREATE_COLLECTION': os.environ.get('MILVUS_AUTO_CREATE', 'True').lower() == 'true',
    'AUTO_LOAD_COLLECTION': os.environ.get('MILVUS_AUTO_LOAD', 'True').lower() == 'true',
}

# Face Detection Service Configuration
FACE_DETECTION_SERVICE_URL = os.environ.get('FACE_DETECTION_SERVICE_URL', 'http://localhost:5000/api/face-detection/')

# ASGI and Parallel Processing Configuration
ASGI_CONFIG = {
    'ENABLE_ASYNC': True,
    'MAX_WORKERS': int(os.environ.get('FACE_AI_MAX_WORKERS', 4)),
    'BATCH_SIZE': int(os.environ.get('FACE_AI_BATCH_SIZE', 10)),
    'THREAD_POOL_SIZE': int(os.environ.get('FACE_AI_THREAD_POOL_SIZE', 8)),
    'ENABLE_PARALLEL_PROCESSING': True,
    'ASYNC_TIMEOUT': 30,  # seconds
    'MAX_CONCURRENT_REQUESTS': 100,
}

# Face AI Parallel Processing Configuration
FACE_AI_PARALLEL_CONFIG = {
    'ENABLE_BATCH_PROCESSING': True,
    'ENABLE_REALTIME_PROCESSING': True,
    'ENABLE_STREAMING': True,
    'MAX_BATCH_SIZE': 50,
    'WORKER_POOL_SIZE': 4,
    'ENABLE_GPU_ACCELERATION': os.environ.get('FACE_AI_ENABLE_GPU', 'false').lower() == 'true',
    'GPU_MEMORY_LIMIT': os.environ.get('FACE_AI_GPU_MEMORY_LIMIT', '4GB'),
}

# Base URL for generating callback URLs
BASE_URL = os.environ.get('BASE_URL', 'http://localhost:8000')

# External Video Processing Service Configuration (Data Ingestion Service)
# Service runs on localhost:8081 - see /docs for API documentation


# Data Ingestion Service Configuration
# Service for ingesting video sources and publishing frames to Kafka
DATA_INGESTION_SERVICE = {
    'BASE_URL': os.environ.get('DATA_INGESTION_SERVICE_URL', 'http://localhost:8001'),
    'NOTIFY_ENDPOINT': '/api/sources',  # Endpoint to notify about new sources
    'HEALTH_ENDPOINT': '/health',  # Health check endpoint
    'STATUS_ENDPOINT': '/api/sources/{source_id}/status',  # Status check endpoint
    'API_KEY': os.environ.get('DATA_INGESTION_SERVICE_API_KEY', ''),  # Optional API key
    'TIMEOUT': 30,  # Request timeout in seconds
}

# Video Processing Service Configuration
# Service for processing videos via the data ingestion service
DATA_INGESTION_SERVICE_URL = os.environ.get('DATA_INGESTION_SERVICE_URL', 'http://localhost:8001')
DATA_INGESTION_TIMEOUT = int(os.environ.get('DATA_INGESTION_TIMEOUT', 30))

# File Upload Settings
MAX_UPLOAD_SIZE = None  # No limit on file size
CHUNK_SIZE = 1024 * 1024  # 1MB chunks for processing
MAX_VIDEO_FILE_SIZE = 500 * 1024 * 1024  # 500MB limit for video files

# Chunked upload behavior
# Files larger than this threshold will be uploaded via client-side chunking and assembled server-side
CHUNKED_UPLOAD_THRESHOLD = int(os.environ.get('CHUNKED_UPLOAD_THRESHOLD', 100 * 1024 * 1024))  # 100MB default

# Video file constraints
ALLOWED_VIDEO_EXTENSIONS = [
    '.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv', '.webm'
]

# Large File Upload Settings
DATA_UPLOAD_MAX_MEMORY_SIZE = 1024 * 1024 * 1024  # 1GB memory limit for file uploads
FILE_UPLOAD_MAX_MEMORY_SIZE = 1024 * 1024 * 1024  # 1GB memory limit for file uploads
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000  # High limit on number of fields

# Streaming upload settings
FILE_UPLOAD_TEMP_DIR = BASE_DIR / 'temp_uploads'
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'session': {
            'format': '[SESSION] {levelname} {asctime} - {message}',
            'style': '{',
        },
        'auth': {
            'format': '[AUTH] {levelname} {asctime} - {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'session_file': {
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'sessions.log',
            'formatter': 'session',
            'level': 'INFO',
        },
        'auth_file': {
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'auth.log',
            'formatter': 'auth',
            'level': 'INFO',
        },
        'session_console': {
            'class': 'logging.StreamHandler',
            'formatter': 'session',
            'level': 'INFO',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'backendapp': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.contrib.sessions': {
            'handlers': ['session_console', 'session_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.contrib.auth': {
            'handlers': ['console', 'auth_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'session_monitoring': {
            'handlers': ['session_console', 'session_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'auth_monitoring': {
            'handlers': ['console', 'auth_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Security settings for production
if not DEBUG:
    # HTTPS and SSL Security
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # Cookie Security
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    
    # Content Security
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'  # Prevent clickjacking
    
    # Additional Security Headers
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
    
else:
    # Development settings - less strict security
    SECURE_SSL_REDIRECT = False
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False
    X_FRAME_OPTIONS = 'SAMEORIGIN'  # Allow same-origin frames in dev

# Security Headers Configuration
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY' if not DEBUG else 'SAMEORIGIN'
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# CSRF Protection
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_TRUSTED_ORIGINS = ['http://localhost:8000', 'http://127.0.0.1:8000', 'http://192.168.86.65:8000']

# Content Security Policy (CSP)
CSP_DEFAULT_SRC = ("'self'",)
CSP_STYLE_SRC = ("'self'", "'unsafe-inline'")  # Allow inline styles for Bootstrap
CSP_SCRIPT_SRC = ("'self'", "'unsafe-inline'")  # Allow inline scripts for Bootstrap
CSP_IMG_SRC = ("'self'", "data:", "https:")
CSP_FONT_SRC = ("'self'", "https:", "data:")

# Rate Limiting
RATELIMIT_ENABLE = True
RATELIMIT_USE_CACHE = 'default'
RATELIMIT_KEY_PREFIX = 'rl'

# Session Security
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Authentication Security
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/login/'
LOGIN_RATELIMIT = '5/m'  # 5 login attempts per minute
LOGIN_RATELIMIT_BLOCK = True

# Password Security
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        'OPTIONS': {
            'max_similarity': 0.7,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 12,  # Increased minimum password length
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
]

# Downstream Service Configuration
# Configuration for sending stream data to external services for processing, analytics, or recording
STREAM_PROCESSSING_SERVICE = {
    'ENABLED': os.environ.get('STREAM_PROCESSSING_SERVICE_ENABLED', 'false').lower() == 'true',
    'URL': os.environ.get('STREAM_PROCESSSING_SERVICE_URL', 'https://your-downstream-service.com/api/streams'),
    'API_TOKEN': os.environ.get('STREAM_PROCESSSING_SERVICE_TOKEN', ''),
    'TIMEOUT': int(os.environ.get('STREAM_PROCESSSING_SERVICE_TIMEOUT', 10)),  # Request timeout in seconds
    'RETRY_ATTEMPTS': int(os.environ.get('STREAM_PROCESSSING_SERVICE_RETRY_ATTEMPTS', 3)),
    'BATCH_SIZE': int(os.environ.get('STREAM_PROCESSSING_SERVICE_BATCH_SIZE', 100)),
    'ENABLE_ANALYTICS': os.environ.get('STREAM_PROCESSSING_SERVICE_ENABLE_ANALYTICS', 'true').lower() == 'true',
    'ENABLE_EVENTS': os.environ.get('STREAM_PROCESSSING_SERVICE_ENABLE_EVENTS', 'true').lower() == 'true',
}

# Individual settings for backward compatibility
STREAM_PROCESSSING_SERVICE_URL = os.environ.get('STREAM_PROCESSSING_SERVICE_URL', 'https://your-downstream-service.com/api/streams')
STREAM_PROCESSSING_SERVICE_TOKEN = os.environ.get('STREAM_PROCESSSING_SERVICE_TOKEN', '')

# Stream Processor Service Configuration
STREAM_PROCESSOR_CONFIG = {
    'BASE_URL': 'http://localhost:8002',
    'EXTERNAL_SERVICE_ID': 'django-source-management',
    'TIMEOUT': 30,
    'ENABLED': True,
}
