"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', "django-secure-8k9x2!v#m@3$qwe4rt5y6ui7op8as9df0gh1jk2lz3xc4vb5nm6@#$%^&*()_+=-[]{}|")

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'
DEBUG = True

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "backendapp",
    # "notifications",  # Temporarily disabled to test session issue
    "video_player",
    "source_management",  # Added for video source management
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # For serving static files
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'backendapp' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Cache configuration for sessions
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = 'backendapp.CustomUser'


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Static files configuration for production
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files (User uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Django Notifications Settings
# DJANGO_NOTIFICATIONS_CONFIG = {
#     'USE_JSONFIELD': True,
# }

# Authentication Settings
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/login/'

# Session Settings
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 1209600  # 2 weeks in seconds
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_COOKIE_SECURE = not DEBUG  # True in production, False in development
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_SAVE_EVERY_REQUEST = False
SESSION_COOKIE_NAME = 'sessionid'

# Milvus Configuration (for future integration)
MILVUS_CONFIG = {
    'HOST': os.environ.get('MILVUS_HOST', 'localhost'),
    'PORT': int(os.environ.get('MILVUS_PORT', '19530')),
    'COLLECTION_PREFIX': 'surveillance_',
    'DIMENSION': 512,  # Face embedding dimension
    'METRIC_TYPE': 'L2',
}

# Face Detection Service Configuration
FACE_DETECTION_SERVICE_URL = os.environ.get('FACE_DETECTION_SERVICE_URL', 'http://localhost:5000/api/face-detection/')

# Base URL for generating callback URLs
BASE_URL = os.environ.get('BASE_URL', 'http://localhost:8000')

# External Video Processing Service Configuration (FastPublisher)
# Refer to source_management/API_DOCUMENTATION.md
VIDEO_PROCESSING_SERVICE = {
    'BASE_URL': os.environ.get('VIDEO_PROCESSING_SERVICE_URL', 'http://localhost:5665'),
    # Endpoints aligned with source_management/API_DOCUMENTATION.md
    'SUBMIT_JOB_ENDPOINT': '/process_video',
    'STATUS_ENDPOINT': '/job/{source_id}/status',
    'HEALTH_ENDPOINT': '/health',
    # No auth required; API_KEY kept for compatibility but not used
    'API_KEY': os.environ.get('VIDEO_PROCESSING_API_KEY', ''),
    'TIMEOUT': 30,  # seconds
}

# File Upload Settings
MAX_UPLOAD_SIZE = None  # No limit on file size
CHUNK_SIZE = 1024 * 1024  # 1MB chunks for processing
MAX_VIDEO_FILE_SIZE = 500 * 1024 * 1024  # 500MB limit for video files

# Chunked upload behavior
# Files larger than this threshold will be uploaded via client-side chunking and assembled server-side
CHUNKED_UPLOAD_THRESHOLD = int(os.environ.get('CHUNKED_UPLOAD_THRESHOLD', 100 * 1024 * 1024))  # 100MB default

# Video file constraints
ALLOWED_VIDEO_EXTENSIONS = [
    '.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv', '.webm'
]

# Large File Upload Settings
DATA_UPLOAD_MAX_MEMORY_SIZE = 1024 * 1024 * 1024  # 1GB memory limit for file uploads
FILE_UPLOAD_MAX_MEMORY_SIZE = 1024 * 1024 * 1024  # 1GB memory limit for file uploads
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000  # High limit on number of fields

# Streaming upload settings
FILE_UPLOAD_TEMP_DIR = BASE_DIR / 'temp_uploads'
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'backendapp': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# # Security settings for production
# if not DEBUG:
#     SECURE_BROWSER_XSS_FILTER = True
#     SECURE_CONTENT_TYPE_NOSNIFF = True
#     X_FRAME_OPTIONS = 'DENY'
#     SECURE_HSTS_SECONDS = 31536000
#     SECURE_HSTS_INCLUDE_SUBDOMAINS = True
#     SECURE_HSTS_PRELOAD = True
#     SECURE_SSL_REDIRECT = True
#     CSRF_COOKIE_SECURE = True
# else:
#     # Development settings - less strict security
#     SECURE_SSL_REDIRECT = False
#     CSRF_COOKIE_SECURE = False

# CSRF settings
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_TRUSTED_ORIGINS = ['http://localhost:8000', 'http://127.0.0.1:8000', 'http://192.168.86.65:8000']
