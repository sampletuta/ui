# Generated by Django 4.2.23 on 2025-08-17 05:02

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="FileSource",
            fields=[
                (
                    "source_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this source",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for this source", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Optional description"),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True, help_text="Physical location", max_length=200
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(blank=True, help_text="GPS latitude", null=True),
                ),
                (
                    "longitude",
                    models.FloatField(blank=True, help_text="GPS longitude", null=True),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True, default=list, help_text="Tags for categorization"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "video_file",
                    models.FileField(
                        help_text="Uploaded video file", upload_to="videos/"
                    ),
                ),
                (
                    "file_format",
                    models.CharField(
                        blank=True,
                        help_text="File format (e.g., mp4, avi)",
                        max_length=10,
                    ),
                ),
                (
                    "file_size",
                    models.BigIntegerField(
                        blank=True, help_text="File size in bytes", null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("uploading", "Uploading"),
                            ("processing", "Processing"),
                            ("ready", "Ready"),
                            ("failed", "Failed"),
                        ],
                        default="uploading",
                        max_length=20,
                    ),
                ),
                (
                    "duration",
                    models.FloatField(
                        blank=True, help_text="Video duration in seconds", null=True
                    ),
                ),
                (
                    "width",
                    models.IntegerField(
                        blank=True, help_text="Video width in pixels", null=True
                    ),
                ),
                (
                    "height",
                    models.IntegerField(
                        blank=True, help_text="Video height in pixels", null=True
                    ),
                ),
                (
                    "fps",
                    models.FloatField(
                        blank=True,
                        help_text="Frame rate (frames per second)",
                        null=True,
                    ),
                ),
                (
                    "bitrate",
                    models.IntegerField(
                        blank=True,
                        help_text="Video bitrate in bits per second",
                        null=True,
                    ),
                ),
                (
                    "codec",
                    models.CharField(
                        blank=True,
                        help_text="Video codec (e.g., h264, h265)",
                        max_length=50,
                    ),
                ),
                (
                    "audio_codec",
                    models.CharField(
                        blank=True,
                        help_text="Audio codec (e.g., aac, mp3)",
                        max_length=50,
                    ),
                ),
                (
                    "audio_channels",
                    models.IntegerField(
                        blank=True, help_text="Number of audio channels", null=True
                    ),
                ),
                (
                    "audio_sample_rate",
                    models.IntegerField(
                        blank=True, help_text="Audio sample rate in Hz", null=True
                    ),
                ),
                (
                    "access_token",
                    models.CharField(
                        blank=True,
                        help_text="Unique access token for API access",
                        max_length=64,
                        unique=True,
                    ),
                ),
                (
                    "api_endpoint",
                    models.URLField(
                        blank=True, help_text="API endpoint for accessing this video"
                    ),
                ),
                (
                    "stream_url",
                    models.URLField(
                        blank=True, help_text="Stream URL for video playback"
                    ),
                ),
                (
                    "thumbnail_url",
                    models.URLField(blank=True, help_text="URL to video thumbnail"),
                ),
                (
                    "processing_started_at",
                    models.DateTimeField(
                        blank=True, help_text="When processing started", null=True
                    ),
                ),
                (
                    "processing_completed_at",
                    models.DateTimeField(
                        blank=True, help_text="When processing completed", null=True
                    ),
                ),
                (
                    "processing_error",
                    models.TextField(
                        blank=True, help_text="Error message if processing failed"
                    ),
                ),
                (
                    "recording_date",
                    models.DateTimeField(
                        blank=True, help_text="Date when video was recorded", null=True
                    ),
                ),
                (
                    "camera_info",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Camera information if available",
                    ),
                ),
                (
                    "scene_info",
                    models.JSONField(
                        blank=True, default=dict, help_text="Scene analysis information"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "File Source",
                "verbose_name_plural": "File Sources",
            },
        ),
        migrations.CreateModel(
            name="VideoProcessingJob",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "job_id",
                    models.CharField(
                        help_text="External service job ID", max_length=100, unique=True
                    ),
                ),
                (
                    "external_job_id",
                    models.CharField(
                        blank=True,
                        help_text="Job ID returned by external service",
                        max_length=100,
                    ),
                ),
                (
                    "target_fps",
                    models.IntegerField(
                        help_text="Target frame rate",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(120),
                        ],
                    ),
                ),
                (
                    "target_resolution",
                    models.CharField(
                        help_text="Target resolution (e.g., 640x480)", max_length=20
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("submitted_at", models.DateTimeField(auto_now_add=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "external_service_url",
                    models.URLField(help_text="URL of the external processing service"),
                ),
                (
                    "callback_url",
                    models.URLField(
                        blank=True,
                        help_text="Callback URL for external service (optional for pull-based status checking)",
                        null=True,
                    ),
                ),
                (
                    "access_token",
                    models.CharField(
                        help_text="Access token for external service", max_length=64
                    ),
                ),
                (
                    "external_response",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Response from external service",
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message if job failed"
                    ),
                ),
                (
                    "processed_video_url",
                    models.URLField(blank=True, help_text="URL to processed video"),
                ),
                (
                    "processing_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional processing metadata",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="processing_jobs",
                        to="source_management.filesource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Video Processing Job",
                "verbose_name_plural": "Video Processing Jobs",
                "ordering": ["-submitted_at"],
            },
        ),
        migrations.CreateModel(
            name="StreamSource",
            fields=[
                (
                    "source_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this source",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for this source", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Optional description"),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True, help_text="Physical location", max_length=200
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(blank=True, help_text="GPS latitude", null=True),
                ),
                (
                    "longitude",
                    models.FloatField(blank=True, help_text="GPS longitude", null=True),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True, default=list, help_text="Tags for categorization"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("stream_url", models.URLField(help_text="URL of the video stream")),
                (
                    "stream_protocol",
                    models.CharField(
                        choices=[
                            ("rtsp", "RTSP"),
                            ("http", "HTTP"),
                            ("https", "HTTPS"),
                            ("rtmp", "RTMP"),
                            ("hls", "HLS"),
                            ("dash", "DASH"),
                        ],
                        default="rtsp",
                        help_text="Protocol of the stream",
                        max_length=10,
                    ),
                ),
                (
                    "stream_quality",
                    models.CharField(
                        blank=True,
                        help_text="Stream quality (e.g., 1080p, 720p)",
                        max_length=20,
                    ),
                ),
                (
                    "stream_parameters",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional stream parameters as JSON",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Stream Source",
                "verbose_name_plural": "Stream Sources",
            },
        ),
        migrations.CreateModel(
            name="CameraSource",
            fields=[
                (
                    "source_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this source",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for this source", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Optional description"),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True, help_text="Physical location", max_length=200
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(blank=True, help_text="GPS latitude", null=True),
                ),
                (
                    "longitude",
                    models.FloatField(blank=True, help_text="GPS longitude", null=True),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True, default=list, help_text="Tags for categorization"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "camera_ip",
                    models.GenericIPAddressField(help_text="IP address of the camera"),
                ),
                (
                    "camera_port",
                    models.IntegerField(
                        default=554,
                        help_text="Port number for camera connection",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(65535),
                        ],
                    ),
                ),
                (
                    "camera_username",
                    models.CharField(
                        blank=True,
                        help_text="Username for camera authentication",
                        max_length=100,
                    ),
                ),
                (
                    "camera_password",
                    models.CharField(
                        blank=True,
                        help_text="Password for camera authentication",
                        max_length=100,
                    ),
                ),
                (
                    "camera_protocol",
                    models.CharField(
                        choices=[
                            ("rtsp", "RTSP"),
                            ("http", "HTTP"),
                            ("https", "HTTPS"),
                            ("rtmp", "RTMP"),
                        ],
                        default="rtsp",
                        help_text="Protocol used to connect to the camera",
                        max_length=10,
                    ),
                ),
                (
                    "camera_type",
                    models.CharField(
                        choices=[
                            ("ip", "IP Camera"),
                            ("usb", "USB Camera"),
                            ("ptz", "PTZ Camera"),
                            ("dome", "Dome Camera"),
                            ("bullet", "Bullet Camera"),
                            ("other", "Other"),
                        ],
                        default="ip",
                        help_text="Type of camera hardware",
                        max_length=20,
                    ),
                ),
                (
                    "camera_resolution",
                    models.CharField(
                        blank=True,
                        help_text="Camera resolution (e.g., 1920x1080)",
                        max_length=20,
                    ),
                ),
                (
                    "camera_fps",
                    models.IntegerField(
                        blank=True,
                        help_text="Frame rate in frames per second",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(120),
                        ],
                    ),
                ),
                (
                    "zone",
                    models.CharField(
                        blank=True,
                        help_text="Zone name for organization",
                        max_length=100,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this source is active"
                    ),
                ),
                (
                    "configuration",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional configuration as JSON",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Camera Source",
                "verbose_name_plural": "Camera Sources",
            },
        ),
    ]
