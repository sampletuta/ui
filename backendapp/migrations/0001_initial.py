# Generated by Django 5.2.4 on 2025-08-02 10:08

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=30)),
                ("last_name", models.CharField(blank=True, max_length=30)),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "role",
                    models.CharField(
                        choices=[("admin", "Admin"), ("user", "User")],
                        default="user",
                        max_length=10,
                    ),
                ),
                ("is_staff", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("date_joined", models.DateTimeField(auto_now_add=True)),
                ("last_login", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Case",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("case_name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cases",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SearchQuery",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "search_type",
                    models.CharField(
                        choices=[
                            ("face", "Face Search"),
                            ("license_plate", "License Plate Search"),
                            ("object", "Object Detection"),
                            ("behavior", "Behavior Analysis"),
                        ],
                        default="face",
                        max_length=20,
                    ),
                ),
                (
                    "query_name",
                    models.CharField(
                        help_text="Name for this search query", max_length=200
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("start_date", models.DateTimeField(blank=True, null=True)),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                (
                    "latitude",
                    models.FloatField(
                        blank=True,
                        help_text="Center latitude for geospatial search",
                        null=True,
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        blank=True,
                        help_text="Center longitude for geospatial search",
                        null=True,
                    ),
                ),
                (
                    "radius_km",
                    models.FloatField(
                        default=5.0, help_text="Search radius in kilometers"
                    ),
                ),
                (
                    "confidence_threshold",
                    models.FloatField(
                        default=0.7, help_text="Minimum confidence score (0.0-1.0)"
                    ),
                ),
                (
                    "target_filters",
                    models.JSONField(
                        blank=True, default=dict, help_text="Additional target filters"
                    ),
                ),
                (
                    "milvus_collection",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "milvus_partition",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="search_queries",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Targets_watchlist",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "target_name",
                    models.CharField(help_text="Name of the target", max_length=100),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("target_text", models.TextField(blank=True, null=True)),
                ("target_url", models.URLField(blank=True, null=True)),
                (
                    "target_email",
                    models.EmailField(blank=True, max_length=254, null=True),
                ),
                (
                    "target_phone",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "case_status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("pending", "Pending"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                            ("in_progress", "In Progress"),
                            ("on_hold", "On Hold"),
                            ("archived", "Archived"),
                        ],
                        default="active",
                        max_length=100,
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("male", "Male"), ("female", "Female")],
                        default="male",
                        max_length=100,
                    ),
                ),
                (
                    "case",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="targets_watchlist",
                        to="backendapp.case",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="targets_watchlist",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TargetPhoto",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("image", models.ImageField(upload_to="target_photos/")),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="uploaded_images",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="backendapp.targets_watchlist",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SearchResult",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("timestamp", models.FloatField(help_text="Timestamp in seconds")),
                (
                    "confidence",
                    models.FloatField(help_text="Detection confidence score"),
                ),
                (
                    "bounding_box",
                    models.JSONField(
                        blank=True,
                        help_text="Bounding box as JSON: {x, y, w, h}",
                        null=True,
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        blank=True, help_text="Detection latitude", null=True
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        blank=True, help_text="Detection longitude", null=True
                    ),
                ),
                ("camera_id", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "camera_name",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "face_image",
                    models.ImageField(
                        blank=True, null=True, upload_to="detected_faces/"
                    ),
                ),
                ("source_video_url", models.URLField(blank=True, null=True)),
                ("source_video_timestamp", models.FloatField(blank=True, null=True)),
                (
                    "milvus_vector_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "milvus_distance",
                    models.FloatField(
                        blank=True, help_text="Distance from query vector", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "search_query",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results",
                        to="backendapp.searchquery",
                    ),
                ),
                (
                    "target",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="search_results",
                        to="backendapp.targets_watchlist",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SearchHistory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("video_file", models.FileField(upload_to="search_videos/")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("queued", "Queued"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("error", "Error"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="queued",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("result_summary", models.JSONField(blank=True, null=True)),
                ("error_message", models.TextField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="search_histories",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "target_list",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="search_histories",
                        to="backendapp.targets_watchlist",
                    ),
                ),
            ],
        ),
    ]
